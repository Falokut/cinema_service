syntax = "proto3";

package cinema_service;
import "cinema_service_v1_messages.proto";
option go_package = "cinema_service/v1/protos";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";

    info: {
        title:
            "Cinema service";
        version:
            "1.0";
        contact: {
        name:
            "Falokut";
        url:
            "https://github.com/Falokut";
        email:
            "timur.sinelnik@yandex.ru";
        };
    }
    responses: {
        key:"404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    ref: "#/definitions/googlerpcStatus";
                }
            }
        }
    }
    responses: {
        key: "500";
        value: {
            description: "Something went wrong.";
            schema: {
                json_schema: {
                    ref: "#/definitions/googlerpcStatus";
                }
            }
        }
    }
};


service cinemaServiceV1 {
    // Returns all cities where there are cinemas.
    rpc GetCinemasCities(google.protobuf.Empty) returns(Cities){
        option (google.api.http) = {
            get: "/v1/cities"
        };
    }

    // Returns cinemas in the city.
    rpc GetCinemasInCity(GetCinemasInCityRequest) returns(Cinemas){
        option (google.api.http) = {
            get: "/v1/cities/{cityID}/cinemas"
        };
    }

    // Returns cinema with specified id.
    rpc GetCinema(GetCinemaRequest) returns(Cinema){
        option (google.api.http) = {
            get: "/v1/cinema/{cinemaID}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "404"
                value: {
                    description: "Returned when cinema with specified id not found.";
                    schema: {
                        json_schema: {
                            ref: "#/definitions/googlerpcStatus";
                        }
                    }
                }
            };
        };
    }

    // Returns info about screening.
    rpc GetScreening(GetScreeningRequest) returns(GetScreeningResponse) {
        option (google.api.http) = {
            get: "/v1/screening/{screeningID}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "404"
                value: {
                    description: "Returned when screening with specified id not found.";
                    schema: {
                        json_schema: {
                            ref: "#/definitions/googlerpcStatus";
                        }
                    }
                }
            };
            responses: {
                key: "400"
                value: {
                    description: "Returned when the mask paths contains fields that are not in the GetScreeningResponse.";
                    schema: {
                        json_schema: {
                            ref: "#/definitions/googlerpcStatus";
                        }
                    }
                }
            };
        };
    }

    // Returns all movies that are in the cinema screenings in a particular cinema.
    rpc GetMoviesScreenings(GetMoviesScreeningsRequest) returns(PreviewScreenings){
        option (google.api.http) = {
            get: "/v1/cinema/{cinemaID}/screenings/movies"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when specified start_period or end_period is not valid."
                    }
            };
        };
    }

    // Returns all movies screenings in the cinema screenings in specified cities, or in all cities, if not specified.
    rpc GetMoviesScreeningsInCities(GetMoviesScreeningsInCitiesRequest) returns(PreviewScreenings){
        option (google.api.http) = {
            get: "/v1/screenings/movies"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when specified start_period or end_period or cities_ids is not valid."
                    }
            };
        };
    }

    // Returns screenings in the cinema screenings in specified city with specified movie_id.
    rpc GetScreeningsInCity(GetScreeningsInCityRequest) returns(CityScreenings){
        option (google.api.http) = {
            get: "/v1/city/{cityID}/screenings"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when specified start_period or end_period is not valid."
                    }
            };
        };
    }

	// Returns info for the halls with specified ids (without configuration).
    rpc GetHalls(GetHallsRequest) returns(Halls){
        option (google.api.http) = {
            get: "/v1/halls"
        };
    }

    //Returns all screenings for a movie in a specific cinema.
    rpc GetScreenings(GetScreeningsRequest) returns(Screenings){
        option (google.api.http) = {
            get: "/v1/cinema/{cinemaID}/screenings"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "400"
                    value: {
                        description: "Returned when specified start_period or end_period is not valid."
                    }
            };
        };
    }

    // Returns the configuration of the hall.
    rpc GetHallConfiguration(GetHallConfigurationRequest) returns(HallConfiguration) {
        option (google.api.http) = {
            get: "/v1/hall/{hallID}/configuration"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            responses: {
                key: "404"
                    value: {
                        description: "Returned when hall with specified id not found."
                    }
            };
        };
    }

}
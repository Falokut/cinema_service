// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: cinema_service_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CinemaServiceV1Client is the client API for CinemaServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaServiceV1Client interface {
	// Returns all cities where there are cinemas.
	GetCinemasCities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Cities, error)
	// Returns cinemas in the city.
	GetCinemasInCity(ctx context.Context, in *GetCinemasInCityRequest, opts ...grpc.CallOption) (*Cinemas, error)
	// Returns cinema with specified id.
	GetCinema(ctx context.Context, in *GetCinemaRequest, opts ...grpc.CallOption) (*Cinema, error)
	// Returns info about screening.
	GetScreening(ctx context.Context, in *GetScreeningRequest, opts ...grpc.CallOption) (*GetScreeningResponse, error)
	// Returns all movies that are in the cinema screenings in a particular cinema.
	GetMoviesScreenings(ctx context.Context, in *GetMoviesScreeningsRequest, opts ...grpc.CallOption) (*PreviewScreenings, error)
	// Returns all movies screenings in the cinema screenings in specified cities, or in all cities, if not specified.
	GetMoviesScreeningsInCities(ctx context.Context, in *GetMoviesScreeningsInCitiesRequest, opts ...grpc.CallOption) (*PreviewScreenings, error)
	// Returns screenings in the cinema screenings in specified city with specified movie_id.
	GetScreeningsInCity(ctx context.Context, in *GetScreeningsInCityRequest, opts ...grpc.CallOption) (*CityScreenings, error)
	// Returns info for the halls with specified ids (without configuration).
	GetHalls(ctx context.Context, in *GetHallsRequest, opts ...grpc.CallOption) (*Halls, error)
	// Returns all screenings for a movie in a specific cinema.
	GetScreenings(ctx context.Context, in *GetScreeningsRequest, opts ...grpc.CallOption) (*Screenings, error)
	// Returns the configuration of the hall.
	GetHallConfiguration(ctx context.Context, in *GetHallConfigurationRequest, opts ...grpc.CallOption) (*HallConfiguration, error)
}

type cinemaServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCinemaServiceV1Client(cc grpc.ClientConnInterface) CinemaServiceV1Client {
	return &cinemaServiceV1Client{cc}
}

func (c *cinemaServiceV1Client) GetCinemasCities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Cities, error) {
	out := new(Cities)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetCinemasCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetCinemasInCity(ctx context.Context, in *GetCinemasInCityRequest, opts ...grpc.CallOption) (*Cinemas, error) {
	out := new(Cinemas)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetCinemasInCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetCinema(ctx context.Context, in *GetCinemaRequest, opts ...grpc.CallOption) (*Cinema, error) {
	out := new(Cinema)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetCinema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetScreening(ctx context.Context, in *GetScreeningRequest, opts ...grpc.CallOption) (*GetScreeningResponse, error) {
	out := new(GetScreeningResponse)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetScreening", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetMoviesScreenings(ctx context.Context, in *GetMoviesScreeningsRequest, opts ...grpc.CallOption) (*PreviewScreenings, error) {
	out := new(PreviewScreenings)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetMoviesScreenings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetMoviesScreeningsInCities(ctx context.Context, in *GetMoviesScreeningsInCitiesRequest, opts ...grpc.CallOption) (*PreviewScreenings, error) {
	out := new(PreviewScreenings)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetMoviesScreeningsInCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetScreeningsInCity(ctx context.Context, in *GetScreeningsInCityRequest, opts ...grpc.CallOption) (*CityScreenings, error) {
	out := new(CityScreenings)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetScreeningsInCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetHalls(ctx context.Context, in *GetHallsRequest, opts ...grpc.CallOption) (*Halls, error) {
	out := new(Halls)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetHalls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetScreenings(ctx context.Context, in *GetScreeningsRequest, opts ...grpc.CallOption) (*Screenings, error) {
	out := new(Screenings)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetScreenings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceV1Client) GetHallConfiguration(ctx context.Context, in *GetHallConfigurationRequest, opts ...grpc.CallOption) (*HallConfiguration, error) {
	out := new(HallConfiguration)
	err := c.cc.Invoke(ctx, "/cinema_service.cinemaServiceV1/GetHallConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaServiceV1Server is the server API for CinemaServiceV1 service.
// All implementations must embed UnimplementedCinemaServiceV1Server
// for forward compatibility
type CinemaServiceV1Server interface {
	// Returns all cities where there are cinemas.
	GetCinemasCities(context.Context, *emptypb.Empty) (*Cities, error)
	// Returns cinemas in the city.
	GetCinemasInCity(context.Context, *GetCinemasInCityRequest) (*Cinemas, error)
	// Returns cinema with specified id.
	GetCinema(context.Context, *GetCinemaRequest) (*Cinema, error)
	// Returns info about screening.
	GetScreening(context.Context, *GetScreeningRequest) (*GetScreeningResponse, error)
	// Returns all movies that are in the cinema screenings in a particular cinema.
	GetMoviesScreenings(context.Context, *GetMoviesScreeningsRequest) (*PreviewScreenings, error)
	// Returns all movies screenings in the cinema screenings in specified cities, or in all cities, if not specified.
	GetMoviesScreeningsInCities(context.Context, *GetMoviesScreeningsInCitiesRequest) (*PreviewScreenings, error)
	// Returns screenings in the cinema screenings in specified city with specified movie_id.
	GetScreeningsInCity(context.Context, *GetScreeningsInCityRequest) (*CityScreenings, error)
	// Returns info for the halls with specified ids (without configuration).
	GetHalls(context.Context, *GetHallsRequest) (*Halls, error)
	// Returns all screenings for a movie in a specific cinema.
	GetScreenings(context.Context, *GetScreeningsRequest) (*Screenings, error)
	// Returns the configuration of the hall.
	GetHallConfiguration(context.Context, *GetHallConfigurationRequest) (*HallConfiguration, error)
	mustEmbedUnimplementedCinemaServiceV1Server()
}

// UnimplementedCinemaServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedCinemaServiceV1Server struct {
}

func (UnimplementedCinemaServiceV1Server) GetCinemasCities(context.Context, *emptypb.Empty) (*Cities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCinemasCities not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetCinemasInCity(context.Context, *GetCinemasInCityRequest) (*Cinemas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCinemasInCity not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetCinema(context.Context, *GetCinemaRequest) (*Cinema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCinema not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetScreening(context.Context, *GetScreeningRequest) (*GetScreeningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreening not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetMoviesScreenings(context.Context, *GetMoviesScreeningsRequest) (*PreviewScreenings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoviesScreenings not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetMoviesScreeningsInCities(context.Context, *GetMoviesScreeningsInCitiesRequest) (*PreviewScreenings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoviesScreeningsInCities not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetScreeningsInCity(context.Context, *GetScreeningsInCityRequest) (*CityScreenings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreeningsInCity not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetHalls(context.Context, *GetHallsRequest) (*Halls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHalls not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetScreenings(context.Context, *GetScreeningsRequest) (*Screenings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenings not implemented")
}
func (UnimplementedCinemaServiceV1Server) GetHallConfiguration(context.Context, *GetHallConfigurationRequest) (*HallConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHallConfiguration not implemented")
}
func (UnimplementedCinemaServiceV1Server) mustEmbedUnimplementedCinemaServiceV1Server() {}

// UnsafeCinemaServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaServiceV1Server will
// result in compilation errors.
type UnsafeCinemaServiceV1Server interface {
	mustEmbedUnimplementedCinemaServiceV1Server()
}

func RegisterCinemaServiceV1Server(s grpc.ServiceRegistrar, srv CinemaServiceV1Server) {
	s.RegisterService(&CinemaServiceV1_ServiceDesc, srv)
}

func _CinemaServiceV1_GetCinemasCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetCinemasCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetCinemasCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetCinemasCities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetCinemasInCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCinemasInCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetCinemasInCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetCinemasInCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetCinemasInCity(ctx, req.(*GetCinemasInCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetCinema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCinemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetCinema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetCinema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetCinema(ctx, req.(*GetCinemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetScreening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreeningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetScreening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetScreening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetScreening(ctx, req.(*GetScreeningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetMoviesScreenings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesScreeningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetMoviesScreenings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetMoviesScreenings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetMoviesScreenings(ctx, req.(*GetMoviesScreeningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetMoviesScreeningsInCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesScreeningsInCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetMoviesScreeningsInCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetMoviesScreeningsInCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetMoviesScreeningsInCities(ctx, req.(*GetMoviesScreeningsInCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetScreeningsInCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreeningsInCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetScreeningsInCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetScreeningsInCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetScreeningsInCity(ctx, req.(*GetScreeningsInCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetHalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetHalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetHalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetHalls(ctx, req.(*GetHallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetScreenings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreeningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetScreenings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetScreenings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetScreenings(ctx, req.(*GetScreeningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceV1_GetHallConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHallConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceV1Server).GetHallConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_service.cinemaServiceV1/GetHallConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceV1Server).GetHallConfiguration(ctx, req.(*GetHallConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaServiceV1_ServiceDesc is the grpc.ServiceDesc for CinemaServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cinema_service.cinemaServiceV1",
	HandlerType: (*CinemaServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCinemasCities",
			Handler:    _CinemaServiceV1_GetCinemasCities_Handler,
		},
		{
			MethodName: "GetCinemasInCity",
			Handler:    _CinemaServiceV1_GetCinemasInCity_Handler,
		},
		{
			MethodName: "GetCinema",
			Handler:    _CinemaServiceV1_GetCinema_Handler,
		},
		{
			MethodName: "GetScreening",
			Handler:    _CinemaServiceV1_GetScreening_Handler,
		},
		{
			MethodName: "GetMoviesScreenings",
			Handler:    _CinemaServiceV1_GetMoviesScreenings_Handler,
		},
		{
			MethodName: "GetMoviesScreeningsInCities",
			Handler:    _CinemaServiceV1_GetMoviesScreeningsInCities_Handler,
		},
		{
			MethodName: "GetScreeningsInCity",
			Handler:    _CinemaServiceV1_GetScreeningsInCity_Handler,
		},
		{
			MethodName: "GetHalls",
			Handler:    _CinemaServiceV1_GetHalls_Handler,
		},
		{
			MethodName: "GetScreenings",
			Handler:    _CinemaServiceV1_GetScreenings_Handler,
		},
		{
			MethodName: "GetHallConfiguration",
			Handler:    _CinemaServiceV1_GetHallConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cinema_service_v1.proto",
}
